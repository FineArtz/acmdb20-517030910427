package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate predicate;
    private final TupleDesc tupleDesc;
    private final Map<Integer, ArrayList<Tuple>> hashTable = new HashMap<>();
    private DbIterator child1, child2;
    private Tuple tuple1;
    private transient Iterator<Tuple> listIt = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        this.tuple1 = null;
    }

    JoinPredicate getJoinPredicate() {
        return predicate;
    }

    public TupleDesc getTupleDesc() {
        return tupleDesc;
    }

    String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(predicate.getField1());
    }

    String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(predicate.getField2());
    }

    public void open()
    throws DbException, NoSuchElementException, TransactionAbortedException {
        child1.open();
        child2.open();
        initHashMap();
        super.open();
    }

    public void close() {
        child1.close();
        child2.close();
        super.close();
    }

    public void rewind()
    throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples. Logically, this is the next
     * tuple in r1 cross r2 that satisfies the join predicate. There are many possible implementations; the simplest is
     * a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join are simply the concatenation of joining
     * tuples from the left and right relation. Therefore, there will be two copies of the join attribute in the
     * results. (Removing such duplicate columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6}, joined on equality of the first column, then
     * this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     *
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext()
    throws TransactionAbortedException, DbException {
        if (listIt == null || !listIt.hasNext()) {
            while (child1.hasNext()) {
                tuple1 = child1.next();
                Integer key = tuple1.getField(predicate.getField1()).hashCode();
                ArrayList<Tuple> tuples = hashTable.get(key);
                if (tuples != null) {
                    listIt = tuples.iterator();
                    break;
                }
            }
        }
        if (listIt == null || !listIt.hasNext()) {
            return null;
        }
        Tuple tuple2 = listIt.next();
        Tuple tuple = new Tuple(tupleDesc);
        Join.setJoinResult(tuple, tuple1, tuple2);
        return tuple;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }

    private void initHashMap()
    throws DbException, NoSuchElementException, TransactionAbortedException {
        while (child2.hasNext()) {
            Tuple tuple = child2.next();
            Integer key = tuple.getField(predicate.getField2()).hashCode();
            if (!hashTable.containsKey(key)) {
                hashTable.put(key, new ArrayList<>());
            }
            hashTable.get(key).add(tuple);
        }
    }

}
